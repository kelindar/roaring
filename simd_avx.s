//go:build !noasm && amd64
// AUTO-GENERATED BY GOCC -- DO NOT EDIT

TEXT Â·_find16(SB), $0-32
	MOVQ input+0(FP), DI
	MOVQ target+8(FP), SI
	MOVQ result+16(FP), DX
	MOVQ size+24(FP), CX
	BYTE $0x55                                 // push	rbp
	WORD $0x8948; BYTE $0xe5                   // mov	rbp, rsp
	LONG $0xf8e48348                           // and	rsp, -8
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff // mov	qword ptr [rdx], -1
	WORD $0x8548; BYTE $0xc9                   // test	rcx, rcx
	JE   LBB0_10
	LONG $0x10f98348                           // cmp	rcx, 16
	JB   LBB0_2
	LONG $0xc66ef9c5                           // vmovd	xmm0, esi
	LONG $0x797de2c4; BYTE $0xc0               // vpbroadcastw	ymm0, xmm0
	WORD $0x3145; BYTE $0xc9                   // xor	r9d, r9d

LBB0_7:
	LONG $0x657da1c4; WORD $0x4f0c // vpcmpgtw	ymm1, ymm0, ymmword ptr [rdi + 2*r9]
	LONG $0xc1d7fdc5               // vpmovmskb	eax, ymm1
	WORD $0xf083; BYTE $0xff       // xor	eax, -1
	JNE  LBB0_8
	LONG $0x10418d4d               // lea	r8, [r9 + 16]
	LONG $0x1fc18349               // add	r9, 31
	WORD $0x3949; BYTE $0xc9       // cmp	r9, rcx
	WORD $0x894d; BYTE $0xc1       // mov	r9, r8
	JB   LBB0_7
	WORD $0x3949; BYTE $0xc8       // cmp	r8, rcx
	JB   LBB0_4

LBB0_10:
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret

LBB0_2:
	WORD $0x3145; BYTE $0xc0 // xor	r8d, r8d
	WORD $0x3949; BYTE $0xc8 // cmp	r8, rcx
	JAE  LBB0_10

LBB0_4:
	LONG $0x34394266; BYTE $0x47 // cmp	word ptr [rdi + 2*r8], si
	JAE  LBB0_9
	WORD $0xff49; BYTE $0xc0     // inc	r8
	WORD $0x394c; BYTE $0xc1     // cmp	rcx, r8
	JNE  LBB0_4
	JMP  LBB0_10

LBB0_8:
	WORD $0xbc0f; BYTE $0xc0 // bsf	eax, eax
	WORD $0xe8d1             // shr	eax
	WORD $0x0949; BYTE $0xc1 // or	r9, rax
	WORD $0x894d; BYTE $0xc8 // mov	r8, r9

LBB0_9:
	WORD $0x894c; BYTE $0x02 // mov	qword ptr [rdx], r8
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret
